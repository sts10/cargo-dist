<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>cargo-dist Changelog</title><link>http://127.0.0.1:7979/cargo-dist/changelog</link><description>Changelog information for cargo-dist</description><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><atom:link href="http://127.0.0.1:7979/cargo-dist/changelog.rss" rel="self"/><item><title>Version 0.21.0 (2024-08-13)</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.21.0</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.21.0</guid><content:encoded><![CDATA[<p>This release contains one major new feature and several bugfixes.</p>
<h2>Improved glibc compatibility checking in installers</h2>
<p>Our installers perform some preflight compatibility checks before installing in order to ensure that your binaries are compatible with the user's system. In particular, we check to ensure that the user's glibc is compatible with the version that your software linked against during its build.</p>
<p>In previous versions of cargo-dist, we hardcoded the version of glibc we expected your software to be built against based on the version used by our default Linux builders. Since the CI runners are configurable, however, it was possible for the actual glibc your package linked against to be different from the one we were expecting. This release adds new build environment tracking metadata, capturing information such as the system glibc/musl version your software linked against and the macOS version used to build. We use the real glibc information in your installers as of this release, and future versions of cargo-dist will make use of the other data we're now tracking.</p>
<ul>
<li>impl
<ul>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1210" rel="noopener noreferrer">Track glibc versions and other runtime requirements</a></li>
<li>@Gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1215" rel="noopener noreferrer">chore: rework RuntimeConditions</a></li>
</ul>
</li>
</ul>
<h2>Fixes</h2>
<ul>
<li>@Gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1309" rel="noopener noreferrer">fix: javascript workspace bugs</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1313" rel="noopener noreferrer">deps: update axios in npm installer</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.21.0-prerelease.1</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.21.0-prerelease.1</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.21.0-prerelease.1</guid><content:encoded><![CDATA[<p>This release contains one major new feature and several bugfixes.</p>
<h2>Improved glibc compatibility checking in installers</h2>
<p>Our installers perform some preflight compatibility checks before installing in order to ensure that your binaries are compatible with the user's system. In particular, we check to ensure that the user's glibc is compatible with the version that your software linked against during its build.</p>
<p>In previous versions of cargo-dist, we hardcoded the version of glibc we expected your software to be built against based on the version used by our default Linux builders. Since the CI runners are configurable, however, it was possible for the actual glibc your package linked against to be different from the one we were expecting. This release adds new build environment tracking metadata, capturing information such as the system glibc/musl version your software linked against and the macOS version used to build. We use the real glibc information in your installers as of this release, and future versions of cargo-dist will make use of the other data we're now tracking.</p>
<ul>
<li>impl
<ul>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1210" rel="noopener noreferrer">Track glibc versions and other runtime requirements</a></li>
<li>@Gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1215" rel="noopener noreferrer">chore: rework RuntimeConditions</a></li>
</ul>
</li>
</ul>
<h2>Fixes</h2>
<ul>
<li>@Gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1309" rel="noopener noreferrer">fix: javascript workspace bugs</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1313" rel="noopener noreferrer">deps: update axios in npm installer</a></li>
</ul>
]]></content:encoded></item><item><title>v0.20.0</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0</guid><content:encoded><![CDATA[<p>This release contains several new features and bugfixes.</p>
<h2>Support for packaging C libraries</h2>
<p>Historically, cargo-dist has been focused on building and distributing binaries. There's so many more kinds of software out there, however, and we've had requests to package more kinds of artifacts. This release introduces support for two new kinds of build artifacts: C dynamic libraries, and C static libraries. While these would always be built in the past, we wouldn't package or install them for you. Starting with this release, we've now added the option to include these in your release tarballs/ZIPs and to install them in your installers.</p>
<p>We recognize that it may cause issues if existing binary-plus-library crates began unexpectedly installing libraries with this release, so we've introduced this feature as opt-in for the time being. It may be turned on by default in a future release. To enable packaging libraries in your tarballs/ZIPs, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#package-libraries" rel="noopener noreferrer">package-libraries</a> configuration option. To enable installing libraries, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#install-libraries" rel="noopener noreferrer">install-libraries</a> configuration option.</p>
<p>In the current release, libraries will be installed to the same locations as binaries in the shell and PowerShell installers, while the Homebrew installer will install them to the Homebrew-standard library paths. In the future, as we introduce new forms of installation layouts, we'll provide ways for the shell and PowerShell installers to install libraries to separate locations.</p>
<p>Rust users can produce these with the <code>cdylib</code> and <code>staticlib</code> crate types. For more information, see the <a href="https://doc.rust-lang.org/reference/linkage.html" rel="noopener noreferrer">Rust documentation</a>. Generic build users can specify which libraries to include using the <code>cdylibs</code> and <code>cstaticlibs</code> configuration fields in <code>dist.toml</code>.</p>
<ul>
<li>impl @mistydemeo
<ul>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1182" rel="noopener noreferrer">Support cdylibs from Rust/generic projects</a></li>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1214" rel="noopener noreferrer">Build and install static libs</a></li>
</ul>
</li>
</ul>
<h2>Custom pre-build actions in CI</h2>
<p>This release introduces an experimental feature which makes it possible to run arbitrary extra build steps before cargo-dist's own build step during GitHub Actions runs. This can be useful for users who have mandatory pre-build setup they want to perform which can't be satisfied using the system dependencies feature. For example, a build which requires a custom installation of lua could specify that these two extra steps should be performed before the build begins:</p>
<pre style="background-color:#263238;"><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Install Lua
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">uses</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">xpol/setup-lua@v1
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">with</span><span style="color:#89ddff;">:
</span><span style="color:#eeffff;">    </span><span style="color:#f07178;">lua-version</span><span style="color:#89ddff;">: "</span><span style="color:#c3e88d;">5.3</span><span style="color:#89ddff;">"
</span><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Check lua installation
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">run</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">lua -e "print('hello world!')"
</span></pre>

<p>For more information, <a href="https://opensource.axo.dev/cargo-dist/book/ci/github.html#customizing-build-setup" rel="noopener noreferrer">consult the documentation</a>.</p>
<ul>
<li>impl @FreeMasen <a href="https://github.com/axodotdev/cargo-dist/pull/1217" rel="noopener noreferrer">ci: add github build setup configuration</a></li>
</ul>
<h2>The First Rumblings Of 1.0</h2>
<p>This release introduces the first steps in a major overhaul of cargo-dist that makes it more suitable for building and distributing apps that aren't written in Rust. This is something we've supported for a long time, but now we're making a big push to make it first-class and stabilizing all the parts.</p>
<p>There is also now experimental support for natively understanding JS projects, to make it easier to use dist for standalone JS executables. <a href="https://opensource.axo.dev/cargo-dist/book/quickstart/javascript.html" rel="noopener noreferrer">Read the new JS quickstart for details!</a></p>
<p>Several other pages of the docs have seen overhauls, and many more are to come.</p>
<h2>Fixes</h2>
<ul>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1253" rel="noopener noreferrer">init: ensure terminal is restored when interrupted</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1221" rel="noopener noreferrer">fix: add missing triples to linkage check</a></li>
<li>@Colonial-Dev <a href="https://github.com/axodotdev/cargo-dist/pull/1189" rel="noopener noreferrer">fix: compatibility issues with Bash on certain distributions (Fedora, EL)</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.20.0-prerelease.9</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.9</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.9</guid><content:encoded><![CDATA[<p>This release contains several new features and bugfixes.</p>
<h2>Support for packaging C libraries</h2>
<p>Historically, cargo-dist has been focused on building and distributing binaries. There's so many more kinds of software out there, however, and we've had requests to package more kinds of artifacts. This release introduces support for two new kinds of build artifacts: C dynamic libraries, and C static libraries. While these would always be built in the past, we wouldn't package or install them for you. Starting with this release, we've now added the option to include these in your release tarballs/ZIPs and to install them in your installers.</p>
<p>We recognize that it may cause issues if existing binary-plus-library crates began unexpectedly installing libraries with this release, so we've introduced this feature as opt-in for the time being. It may be turned on by default in a future release. To enable packaging libraries in your tarballs/ZIPs, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#package-libraries" rel="noopener noreferrer">package-libraries</a> configuration option. To enable installing libraries, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#install-libraries" rel="noopener noreferrer">install-libraries</a> configuration option.</p>
<p>In the current release, libraries will be installed to the same locations as binaries in the shell and PowerShell installers, while the Homebrew installer will install them to the Homebrew-standard library paths. In the future, as we introduce new forms of installation layouts, we'll provide ways for the shell and PowerShell installers to install libraries to separate locations.</p>
<p>Rust users can produce these with the <code>cdylib</code> and <code>staticlib</code> crate types. For more information, see the <a href="https://doc.rust-lang.org/reference/linkage.html" rel="noopener noreferrer">Rust documentation</a>. Generic build users can specify which libraries to include using the <code>cdylibs</code> and <code>cstaticlibs</code> configuration fields in <code>dist.toml</code>.</p>
<ul>
<li>impl @mistydemeo
<ul>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1182" rel="noopener noreferrer">Support cdylibs from Rust/generic projects</a></li>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1214" rel="noopener noreferrer">Build and install static libs</a></li>
</ul>
</li>
</ul>
<h2>Custom pre-build actions in CI</h2>
<p>This release introduces an experimental feature which makes it possible to run arbitrary extra build steps before cargo-dist's own build step during GitHub Actions runs. This can be useful for users who have mandatory pre-build setup they want to perform which can't be satisfied using the system dependencies feature. For example, a build which requires a custom installation of lua could specify that these two extra steps should be performed before the build begins:</p>
<pre style="background-color:#263238;"><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Install Lua
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">uses</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">xpol/setup-lua@v1
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">with</span><span style="color:#89ddff;">:
</span><span style="color:#eeffff;">    </span><span style="color:#f07178;">lua-version</span><span style="color:#89ddff;">: "</span><span style="color:#c3e88d;">5.3</span><span style="color:#89ddff;">"
</span><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Check lua installation
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">run</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">lua -e "print('hello world!')"
</span></pre>

<p>For more information, <a href="https://opensource.axo.dev/cargo-dist/book/ci/github.html#customizing-build-setup" rel="noopener noreferrer">consult the documentation</a>.</p>
<ul>
<li>impl @FreeMasen <a href="https://github.com/axodotdev/cargo-dist/pull/1217" rel="noopener noreferrer">ci: add github build setup configuration</a></li>
</ul>
<h2>The First Rumblings Of 1.0</h2>
<p>This release introduces the first steps in a major overhaul of cargo-dist that makes it more suitable for building and distributing apps that aren't written in Rust. This is something we've supported for a long time, but now we're making a big push to make it first-class and stabilizing all the parts.</p>
<p>There is also now experimental support for natively understanding JS projects, to make it easier to use dist for standalone JS executables. <a href="https://opensource.axo.dev/cargo-dist/book/quickstart/javascript.html" rel="noopener noreferrer">Read the new JS quickstart for details!</a></p>
<p>Several other pages of the docs have seen overhauls, and many more are to come.</p>
<h2>Fixes</h2>
<ul>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1253" rel="noopener noreferrer">init: ensure terminal is restored when interrupted</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1221" rel="noopener noreferrer">fix: add missing triples to linkage check</a></li>
<li>@Colonial-Dev <a href="https://github.com/axodotdev/cargo-dist/pull/1189" rel="noopener noreferrer">fix: compatibility issues with Bash on certain distributions (Fedora, EL)</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.20.0-prerelease.8</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.8</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.8</guid><content:encoded><![CDATA[<p>This release contains several new features and bugfixes.</p>
<h2>Support for packaging C libraries</h2>
<p>Historically, cargo-dist has been focused on building and distributing binaries. There's so many more kinds of software out there, however, and we've had requests to package more kinds of artifacts. This release introduces support for two new kinds of build artifacts: C dynamic libraries, and C static libraries. While these would always be built in the past, we wouldn't package or install them for you. Starting with this release, we've now added the option to include these in your release tarballs/ZIPs and to install them in your installers.</p>
<p>We recognize that it may cause issues if existing binary-plus-library crates began unexpectedly installing libraries with this release, so we've introduced this feature as opt-in for the time being. It may be turned on by default in a future release. To enable packaging libraries in your tarballs/ZIPs, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#package-libraries" rel="noopener noreferrer">package-libraries</a> configuration option. To enable installing libraries, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#install-libraries" rel="noopener noreferrer">install-libraries</a> configuration option.</p>
<p>In the current release, libraries will be installed to the same locations as binaries in the shell and PowerShell installers, while the Homebrew installer will install them to the Homebrew-standard library paths. In the future, as we introduce new forms of installation layouts, we'll provide ways for the shell and PowerShell installers to install libraries to separate locations.</p>
<p>Rust users can produce these with the <code>cdylib</code> and <code>staticlib</code> crate types. For more information, see the <a href="https://doc.rust-lang.org/reference/linkage.html" rel="noopener noreferrer">Rust documentation</a>. Generic build users can specify which libraries to include using the <code>cdylibs</code> and <code>cstaticlibs</code> configuration fields in <code>dist.toml</code>.</p>
<ul>
<li>impl @mistydemeo
<ul>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1182" rel="noopener noreferrer">Support cdylibs from Rust/generic projects</a></li>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1214" rel="noopener noreferrer">Build and install static libs</a></li>
</ul>
</li>
</ul>
<h2>Custom pre-build actions in CI</h2>
<p>This release introduces an experimental feature which makes it possible to run arbitrary extra build steps before cargo-dist's own build step during GitHub Actions runs. This can be useful for users who have mandatory pre-build setup they want to perform which can't be satisfied using the system dependencies feature. For example, a build which requires a custom installation of lua could specify that these two extra steps should be performed before the build begins:</p>
<pre style="background-color:#263238;"><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Install Lua
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">uses</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">xpol/setup-lua@v1
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">with</span><span style="color:#89ddff;">:
</span><span style="color:#eeffff;">    </span><span style="color:#f07178;">lua-version</span><span style="color:#89ddff;">: "</span><span style="color:#c3e88d;">5.3</span><span style="color:#89ddff;">"
</span><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Check lua installation
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">run</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">lua -e "print('hello world!')"
</span></pre>

<p>For more information, <a href="https://opensource.axo.dev/cargo-dist/book/ci/github.html#customizing-build-setup" rel="noopener noreferrer">consult the documentation</a>.</p>
<ul>
<li>impl @FreeMasen <a href="https://github.com/axodotdev/cargo-dist/pull/1217" rel="noopener noreferrer">ci: add github build setup configuration</a></li>
</ul>
<h2>The First Rumblings Of 1.0</h2>
<p>This release introduces the first steps in a major overhaul of cargo-dist that makes it more suitable for building and distributing apps that aren't written in Rust. This is something we've supported for a long time, but now we're making a big push to make it first-class and stabilizing all the parts.</p>
<p>There is also now experimental support for natively understanding JS projects, to make it easier to use dist for standalone JS executables. <a href="https://opensource.axo.dev/cargo-dist/book/quickstart/javascript.html" rel="noopener noreferrer">Read the new JS quickstart for details!</a></p>
<p>Several other pages of the docs have seen overhauls, and many more are to come.</p>
<h2>Fixes</h2>
<ul>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1253" rel="noopener noreferrer">init: ensure terminal is restored when interrupted</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1221" rel="noopener noreferrer">fix: add missing triples to linkage check</a></li>
<li>@Colonial-Dev <a href="https://github.com/axodotdev/cargo-dist/pull/1189" rel="noopener noreferrer">fix: compatibility issues with Bash on certain distributions (Fedora, EL)</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.20.0-prerelease.7</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.7</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.7</guid><content:encoded><![CDATA[<p>This release contains several new features and bugfixes.</p>
<h2>Support for packaging C libraries</h2>
<p>Historically, cargo-dist has been focused on building and distributing binaries. There's so many more kinds of software out there, however, and we've had requests to package more kinds of artifacts. This release introduces support for two new kinds of build artifacts: C dynamic libraries, and C static libraries. While these would always be built in the past, we wouldn't package or install them for you. Starting with this release, we've now added the option to include these in your release tarballs/ZIPs and to install them in your installers.</p>
<p>We recognize that it may cause issues if existing binary-plus-library crates began unexpectedly installing libraries with this release, so we've introduced this feature as opt-in for the time being. It may be turned on by default in a future release. To enable packaging libraries in your tarballs/ZIPs, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#package-libraries" rel="noopener noreferrer">package-libraries</a> configuration option. To enable installing libraries, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#install-libraries" rel="noopener noreferrer">install-libraries</a> configuration option.</p>
<p>In the current release, libraries will be installed to the same locations as binaries in the shell and PowerShell installers, while the Homebrew installer will install them to the Homebrew-standard library paths. In the future, as we introduce new forms of installation layouts, we'll provide ways for the shell and PowerShell installers to install libraries to separate locations.</p>
<p>Rust users can produce these with the <code>cdylib</code> and <code>staticlib</code> crate types. For more information, see the <a href="https://doc.rust-lang.org/reference/linkage.html" rel="noopener noreferrer">Rust documentation</a>. Generic build users can specify which libraries to include using the <code>cdylibs</code> and <code>cstaticlibs</code> configuration fields in <code>dist.toml</code>.</p>
<ul>
<li>impl @mistydemeo
<ul>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1182" rel="noopener noreferrer">Support cdylibs from Rust/generic projects</a></li>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1214" rel="noopener noreferrer">Build and install static libs</a></li>
</ul>
</li>
</ul>
<h2>Custom pre-build actions in CI</h2>
<p>This release introduces an experimental feature which makes it possible to run arbitrary extra build steps before cargo-dist's own build step during GitHub Actions runs. This can be useful for users who have mandatory pre-build setup they want to perform which can't be satisfied using the system dependencies feature. For example, a build which requires a custom installation of lua could specify that these two extra steps should be performed before the build begins:</p>
<pre style="background-color:#263238;"><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Install Lua
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">uses</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">xpol/setup-lua@v1
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">with</span><span style="color:#89ddff;">:
</span><span style="color:#eeffff;">    </span><span style="color:#f07178;">lua-version</span><span style="color:#89ddff;">: "</span><span style="color:#c3e88d;">5.3</span><span style="color:#89ddff;">"
</span><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Check lua installation
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">run</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">lua -e "print('hello world!')"
</span></pre>

<p>For more information, <a href="https://opensource.axo.dev/cargo-dist/book/ci/github.html#customizing-build-setup" rel="noopener noreferrer">consult the documentation</a>.</p>
<ul>
<li>impl @FreeMasen <a href="https://github.com/axodotdev/cargo-dist/pull/1217" rel="noopener noreferrer">ci: add github build setup configuration</a></li>
</ul>
<h2>The First Rumblings Of 1.0</h2>
<p>This release introduces the first steps in a major overhaul of cargo-dist that makes it more suitable for building and distributing apps that aren't written in Rust. This is something we've supported for a long time, but now we're making a big push to make it first-class and stabilizing all the parts.</p>
<p>There is also now experimental support for natively understanding JS projects, to make it easier to use dist for standalone JS executables. <a href="https://opensource.axo.dev/cargo-dist/book/quickstart/javascript.html" rel="noopener noreferrer">Read the new JS quickstart for details!</a></p>
<p>Several other pages of the docs have seen overhauls, and many more are to come.</p>
<h2>Fixes</h2>
<ul>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1253" rel="noopener noreferrer">init: ensure terminal is restored when interrupted</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1221" rel="noopener noreferrer">fix: add missing triples to linkage check</a></li>
<li>@Colonial-Dev <a href="https://github.com/axodotdev/cargo-dist/pull/1189" rel="noopener noreferrer">fix: compatibility issues with Bash on certain distributions (Fedora, EL)</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.20.0-prerelease.6</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.6</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.6</guid><content:encoded><![CDATA[<p>This release contains several new features and bugfixes.</p>
<h2>Support for packaging C libraries</h2>
<p>Historically, cargo-dist has been focused on building and distributing binaries. There's so many more kinds of software out there, however, and we've had requests to package more kinds of artifacts. This release introduces support for two new kinds of build artifacts: C dynamic libraries, and C static libraries. While these would always be built in the past, we wouldn't package or install them for you. Starting with this release, we've now added the option to include these in your release tarballs/ZIPs and to install them in your installers.</p>
<p>We recognize that it may cause issues if existing binary-plus-library crates began unexpectedly installing libraries with this release, so we've introduced this feature as opt-in for the time being. It may be turned on by default in a future release. To enable packaging libraries in your tarballs/ZIPs, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#package-libraries" rel="noopener noreferrer">package-libraries</a> configuration option. To enable installing libraries, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#install-libraries" rel="noopener noreferrer">install-libraries</a> configuration option.</p>
<p>In the current release, libraries will be installed to the same locations as binaries in the shell and PowerShell installers, while the Homebrew installer will install them to the Homebrew-standard library paths. In the future, as we introduce new forms of installation layouts, we'll provide ways for the shell and PowerShell installers to install libraries to separate locations.</p>
<p>Rust users can produce these with the <code>cdylib</code> and <code>staticlib</code> crate types. For more information, see the <a href="https://doc.rust-lang.org/reference/linkage.html" rel="noopener noreferrer">Rust documentation</a>. Generic build users can specify which libraries to include using the <code>cdylibs</code> and <code>cstaticlibs</code> configuration fields in <code>dist.toml</code>.</p>
<ul>
<li>impl @mistydemeo
<ul>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1182" rel="noopener noreferrer">Support cdylibs from Rust/generic projects</a></li>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1214" rel="noopener noreferrer">Build and install static libs</a></li>
</ul>
</li>
</ul>
<h2>Custom pre-build actions in CI</h2>
<p>This release introduces an experimental feature which makes it possible to run arbitrary extra build steps before cargo-dist's own build step during GitHub Actions runs. This can be useful for users who have mandatory pre-build setup they want to perform which can't be satisfied using the system dependencies feature. For example, a build which requires a custom installation of lua could specify that these two extra steps should be performed before the build begins:</p>
<pre style="background-color:#263238;"><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Install Lua
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">uses</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">xpol/setup-lua@v1
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">with</span><span style="color:#89ddff;">:
</span><span style="color:#eeffff;">    </span><span style="color:#f07178;">lua-version</span><span style="color:#89ddff;">: "</span><span style="color:#c3e88d;">5.3</span><span style="color:#89ddff;">"
</span><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Check lua installation
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">run</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">lua -e "print('hello world!')"
</span></pre>

<p>For more information, <a href="https://opensource.axo.dev/cargo-dist/book/ci/github.html#customizing-build-setup" rel="noopener noreferrer">consult the documentation</a>.</p>
<ul>
<li>impl @FreeMasen <a href="https://github.com/axodotdev/cargo-dist/pull/1217" rel="noopener noreferrer">ci: add github build setup configuration</a></li>
</ul>
<h2>The First Rumblings Of 1.0</h2>
<p>This release introduces the first steps in a major overhaul of cargo-dist that makes it more suitable for building and distributing apps that aren't written in Rust. This is something we've supported for a long time, but now we're making a big push to make it first-class and stabilizing all the parts.</p>
<p>There is also now experimental support for natively understanding JS projects, to make it easier to use dist for standalone JS executables. <a href="https://opensource.axo.dev/cargo-dist/book/quickstart/javascript.html" rel="noopener noreferrer">Read the new JS quickstart for details!</a></p>
<p>Several other pages of the docs have seen overhauls, and many more are to come.</p>
<h2>Fixes</h2>
<ul>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1253" rel="noopener noreferrer">init: ensure terminal is restored when interrupted</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1221" rel="noopener noreferrer">fix: add missing triples to linkage check</a></li>
<li>@Colonial-Dev <a href="https://github.com/axodotdev/cargo-dist/pull/1189" rel="noopener noreferrer">fix: compatibility issues with Bash on certain distributions (Fedora, EL)</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.20.0-prerelease.5</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.5</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.5</guid><content:encoded><![CDATA[<p>This release contains several new features and bugfixes.</p>
<h2>Support for packaging C libraries</h2>
<p>Historically, cargo-dist has been focused on building and distributing binaries. There's so many more kinds of software out there, however, and we've had requests to package more kinds of artifacts. This release introduces support for two new kinds of build artifacts: C dynamic libraries, and C static libraries. While these would always be built in the past, we wouldn't package or install them for you. Starting with this release, we've now added the option to include these in your release tarballs/ZIPs and to install them in your installers.</p>
<p>We recognize that it may cause issues if existing binary-plus-library crates began unexpectedly installing libraries with this release, so we've introduced this feature as opt-in for the time being. It may be turned on by default in a future release. To enable packaging libraries in your tarballs/ZIPs, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#package-libraries" rel="noopener noreferrer">package-libraries</a> configuration option. To enable installing libraries, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#install-libraries" rel="noopener noreferrer">install-libraries</a> configuration option.</p>
<p>In the current release, libraries will be installed to the same locations as binaries in the shell and PowerShell installers, while the Homebrew installer will install them to the Homebrew-standard library paths. In the future, as we introduce new forms of installation layouts, we'll provide ways for the shell and PowerShell installers to install libraries to separate locations.</p>
<p>Rust users can produce these with the <code>cdylib</code> and <code>staticlib</code> crate types. For more information, see the <a href="https://doc.rust-lang.org/reference/linkage.html" rel="noopener noreferrer">Rust documentation</a>. Generic build users can specify which libraries to include using the <code>cdylibs</code> and <code>cstaticlibs</code> configuration fields in <code>dist.toml</code>.</p>
<ul>
<li>impl @mistydemeo
<ul>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1182" rel="noopener noreferrer">Support cdylibs from Rust/generic projects</a></li>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1214" rel="noopener noreferrer">Build and install static libs</a></li>
</ul>
</li>
</ul>
<h2>Custom pre-build actions in CI</h2>
<p>This release introduces an experimental feature which makes it possible to run arbitrary extra build steps before cargo-dist's own build step during GitHub Actions runs. This can be useful for users who have mandatory pre-build setup they want to perform which can't be satisfied using the system dependencies feature. For example, a build which requires a custom installation of lua could specify that these two extra steps should be performed before the build begins:</p>
<pre style="background-color:#263238;"><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Install Lua
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">uses</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">xpol/setup-lua@v1
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">with</span><span style="color:#89ddff;">:
</span><span style="color:#eeffff;">    </span><span style="color:#f07178;">lua-version</span><span style="color:#89ddff;">: "</span><span style="color:#c3e88d;">5.3</span><span style="color:#89ddff;">"
</span><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Check lua installation
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">run</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">lua -e "print('hello world!')"
</span></pre>

<p>For more information, <a href="https://opensource.axo.dev/cargo-dist/book/ci/github.html#customizing-build-setup" rel="noopener noreferrer">consult the documentation</a>.</p>
<ul>
<li>impl @FreeMasen <a href="https://github.com/axodotdev/cargo-dist/pull/1217" rel="noopener noreferrer">ci: add github build setup configuration</a></li>
</ul>
<h2>The First Rumblings Of 1.0</h2>
<p>This release introduces the first steps in a major overhaul of cargo-dist that makes it more suitable for building and distributing apps that aren't written in Rust. This is something we've supported for a long time, but now we're making a big push to make it first-class and stabilizing all the parts.</p>
<p>There is also now experimental support for natively understanding JS projects, to make it easier to use dist for standalone JS executables. <a href="https://opensource.axo.dev/cargo-dist/book/quickstart/javascript.html" rel="noopener noreferrer">Read the new JS quickstart for details!</a></p>
<p>Several other pages of the docs have seen overhauls, and many more are to come.</p>
<h2>Fixes</h2>
<ul>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1253" rel="noopener noreferrer">init: ensure terminal is restored when interrupted</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1221" rel="noopener noreferrer">fix: add missing triples to linkage check</a></li>
<li>@Colonial-Dev <a href="https://github.com/axodotdev/cargo-dist/pull/1189" rel="noopener noreferrer">fix: compatibility issues with Bash on certain distributions (Fedora, EL)</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.20.0-prerelease.4</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.4</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.4</guid><content:encoded><![CDATA[<p>This release contains several new features and bugfixes.</p>
<h2>Support for packaging C libraries</h2>
<p>Historically, cargo-dist has been focused on building and distributing binaries. There's so many more kinds of software out there, however, and we've had requests to package more kinds of artifacts. This release introduces support for two new kinds of build artifacts: C dynamic libraries, and C static libraries. While these would always be built in the past, we wouldn't package or install them for you. Starting with this release, we've now added the option to include these in your release tarballs/ZIPs and to install them in your installers.</p>
<p>We recognize that it may cause issues if existing binary-plus-library crates began unexpectedly installing libraries with this release, so we've introduced this feature as opt-in for the time being. It may be turned on by default in a future release. To enable packaging libraries in your tarballs/ZIPs, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#package-libraries" rel="noopener noreferrer">package-libraries</a> configuration option. To enable installing libraries, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#install-libraries" rel="noopener noreferrer">install-libraries</a> configuration option.</p>
<p>In the current release, libraries will be installed to the same locations as binaries in the shell and PowerShell installers, while the Homebrew installer will install them to the Homebrew-standard library paths. In the future, as we introduce new forms of installation layouts, we'll provide ways for the shell and PowerShell installers to install libraries to separate locations.</p>
<p>Rust users can produce these with the <code>cdylib</code> and <code>staticlib</code> crate types. For more information, see the <a href="https://doc.rust-lang.org/reference/linkage.html" rel="noopener noreferrer">Rust documentation</a>. Generic build users can specify which libraries to include using the <code>cdylibs</code> and <code>cstaticlibs</code> configuration fields in <code>dist.toml</code>.</p>
<ul>
<li>impl @mistydemeo
<ul>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1182" rel="noopener noreferrer">Support cdylibs from Rust/generic projects</a></li>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1214" rel="noopener noreferrer">Build and install static libs</a></li>
</ul>
</li>
</ul>
<h2>Custom pre-build actions in CI</h2>
<p>This release introduces an experimental feature which makes it possible to run arbitrary extra build steps before cargo-dist's own build step during GitHub Actions runs. This can be useful for users who have mandatory pre-build setup they want to perform which can't be satisfied using the system dependencies feature. For example, a build which requires a custom installation of lua could specify that these two extra steps should be performed before the build begins:</p>
<pre style="background-color:#263238;"><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Install Lua
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">uses</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">xpol/setup-lua@v1
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">with</span><span style="color:#89ddff;">:
</span><span style="color:#eeffff;">    </span><span style="color:#f07178;">lua-version</span><span style="color:#89ddff;">: "</span><span style="color:#c3e88d;">5.3</span><span style="color:#89ddff;">"
</span><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Check lua installation
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">run</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">lua -e "print('hello world!')"
</span></pre>

<p>For more information, <a href="https://opensource.axo.dev/cargo-dist/book/ci/github.html#customizing-build-setup" rel="noopener noreferrer">consult the documentation</a>.</p>
<ul>
<li>impl @FreeMasen <a href="https://github.com/axodotdev/cargo-dist/pull/1217" rel="noopener noreferrer">ci: add github build setup configuration</a></li>
</ul>
<h2>The First Rumblings Of 1.0</h2>
<p>This release introduces the first steps in a major overhaul of cargo-dist that makes it more suitable for building and distributing apps that aren't written in Rust. This is something we've supported for a long time, but now we're making a big push to make it first-class and stabilizing all the parts.</p>
<p>There is also now experimental support for natively understanding JS projects, to make it easier to use dist for standalone JS executables. <a href="https://opensource.axo.dev/cargo-dist/book/quickstart/javascript.html" rel="noopener noreferrer">Read the new JS quickstart for details!</a></p>
<p>Several other pages of the docs have seen overhauls, and many more are to come.</p>
<h2>Fixes</h2>
<ul>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1253" rel="noopener noreferrer">init: ensure terminal is restored when interrupted</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1221" rel="noopener noreferrer">fix: add missing triples to linkage check</a></li>
<li>@Colonial-Dev <a href="https://github.com/axodotdev/cargo-dist/pull/1189" rel="noopener noreferrer">fix: compatibility issues with Bash on certain distributions (Fedora, EL)</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.20.0-prerelease.3</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.3</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.3</guid><content:encoded><![CDATA[<p>This release contains several new features and bugfixes.</p>
<h2>Support for packaging C libraries</h2>
<p>Historically, cargo-dist has been focused on building and distributing binaries. There's so many more kinds of software out there, however, and we've had requests to package more kinds of artifacts. This release introduces support for two new kinds of build artifacts: C dynamic libraries, and C static libraries. While these would always be built in the past, we wouldn't package or install them for you. Starting with this release, we've now added the option to include these in your release tarballs/ZIPs and to install them in your installers.</p>
<p>We recognize that it may cause issues if existing binary-plus-library crates began unexpectedly installing libraries with this release, so we've introduced this feature as opt-in for the time being. It may be turned on by default in a future release. To enable packaging libraries in your tarballs/ZIPs, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#package-libraries" rel="noopener noreferrer">package-libraries</a> configuration option. To enable installing libraries, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#install-libraries" rel="noopener noreferrer">install-libraries</a> configuration option.</p>
<p>In the current release, libraries will be installed to the same locations as binaries in the shell and PowerShell installers, while the Homebrew installer will install them to the Homebrew-standard library paths. In the future, as we introduce new forms of installation layouts, we'll provide ways for the shell and PowerShell installers to install libraries to separate locations.</p>
<p>Rust users can produce these with the <code>cdylib</code> and <code>staticlib</code> crate types. For more information, see the <a href="https://doc.rust-lang.org/reference/linkage.html" rel="noopener noreferrer">Rust documentation</a>. Generic build users can specify which libraries to include using the <code>cdylibs</code> and <code>cstaticlibs</code> configuration fields in <code>dist.toml</code>.</p>
<ul>
<li>impl @mistydemeo
<ul>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1182" rel="noopener noreferrer">Support cdylibs from Rust/generic projects</a></li>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1214" rel="noopener noreferrer">Build and install static libs</a></li>
</ul>
</li>
</ul>
<h2>Custom pre-build actions in CI</h2>
<p>This release introduces an experimental feature which makes it possible to run arbitrary extra build steps before cargo-dist's own build step during GitHub Actions runs. This can be useful for users who have mandatory pre-build setup they want to perform which can't be satisfied using the system dependencies feature. For example, a build which requires a custom installation of lua could specify that these two extra steps should be performed before the build begins:</p>
<pre style="background-color:#263238;"><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Install Lua
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">uses</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">xpol/setup-lua@v1
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">with</span><span style="color:#89ddff;">:
</span><span style="color:#eeffff;">    </span><span style="color:#f07178;">lua-version</span><span style="color:#89ddff;">: "</span><span style="color:#c3e88d;">5.3</span><span style="color:#89ddff;">"
</span><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Check lua installation
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">run</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">lua -e "print('hello world!')"
</span></pre>

<p>For more information, <a href="https://opensource.axo.dev/cargo-dist/book/ci/github.html#customizing-build-setup" rel="noopener noreferrer">consult the documentation</a>.</p>
<ul>
<li>impl @FreeMasen <a href="https://github.com/axodotdev/cargo-dist/pull/1217" rel="noopener noreferrer">ci: add github build setup configuration</a></li>
</ul>
<h2>The First Rumblings Of 1.0</h2>
<p>This release introduces the first steps in a major overhaul of cargo-dist that makes it more suitable for building and distributing apps that aren't written in Rust. This is something we've supported for a long time, but now we're making a big push to make it first-class and stabilizing all the parts.</p>
<p>There is also now experimental support for natively understanding JS projects, to make it easier to use dist for standalone JS executables. <a href="https://opensource.axo.dev/cargo-dist/book/quickstart/javascript.html" rel="noopener noreferrer">Read the new JS quickstart for details!</a></p>
<p>Several other pages of the docs have seen overhauls, and many more are to come.</p>
<h2>Fixes</h2>
<ul>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1253" rel="noopener noreferrer">init: ensure terminal is restored when interrupted</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1221" rel="noopener noreferrer">fix: add missing triples to linkage check</a></li>
<li>@Colonial-Dev <a href="https://github.com/axodotdev/cargo-dist/pull/1189" rel="noopener noreferrer">fix: compatibility issues with Bash on certain distributions (Fedora, EL)</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.20.0-prerelease.2</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.2</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.2</guid><content:encoded><![CDATA[<p>This release contains several new features and bugfixes.</p>
<h2>Support for packaging C libraries</h2>
<p>Historically, cargo-dist has been focused on building and distributing binaries. There's so many more kinds of software out there, however, and we've had requests to package more kinds of artifacts. This release introduces support for two new kinds of build artifacts: C dynamic libraries, and C static libraries. While these would always be built in the past, we wouldn't package or install them for you. Starting with this release, we've now added the option to include these in your release tarballs/ZIPs and to install them in your installers.</p>
<p>We recognize that it may cause issues if existing binary-plus-library crates began unexpectedly installing libraries with this release, so we've introduced this feature as opt-in for the time being. It may be turned on by default in a future release. To enable packaging libraries in your tarballs/ZIPs, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#package-libraries" rel="noopener noreferrer">package-libraries</a> configuration option. To enable installing libraries, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#install-libraries" rel="noopener noreferrer">install-libraries</a> configuration option.</p>
<p>In the current release, libraries will be installed to the same locations as binaries in the shell and PowerShell installers, while the Homebrew installer will install them to the Homebrew-standard library paths. In the future, as we introduce new forms of installation layouts, we'll provide ways for the shell and PowerShell installers to install libraries to separate locations.</p>
<p>Rust users can produce these with the <code>cdylib</code> and <code>staticlib</code> crate types. For more information, see the <a href="https://doc.rust-lang.org/reference/linkage.html" rel="noopener noreferrer">Rust documentation</a>. Generic build users can specify which libraries to include using the <code>cdylibs</code> and <code>cstaticlibs</code> configuration fields in <code>dist.toml</code>.</p>
<ul>
<li>impl @mistydemeo
<ul>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1182" rel="noopener noreferrer">Support cdylibs from Rust/generic projects</a></li>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1214" rel="noopener noreferrer">Build and install static libs</a></li>
</ul>
</li>
</ul>
<h2>Custom pre-build actions in CI</h2>
<p>This release introduces an experimental feature which makes it possible to run arbitrary extra build steps before cargo-dist's own build step during GitHub Actions runs. This can be useful for users who have mandatory pre-build setup they want to perform which can't be satisfied using the system dependencies feature. For example, a build which requires a custom installation of lua could specify that these two extra steps should be performed before the build begins:</p>
<pre style="background-color:#263238;"><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Install Lua
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">uses</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">xpol/setup-lua@v1
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">with</span><span style="color:#89ddff;">:
</span><span style="color:#eeffff;">    </span><span style="color:#f07178;">lua-version</span><span style="color:#89ddff;">: "</span><span style="color:#c3e88d;">5.3</span><span style="color:#89ddff;">"
</span><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Check lua installation
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">run</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">lua -e "print('hello world!')"
</span></pre>

<p>For more information, <a href="https://opensource.axo.dev/cargo-dist/book/ci/github.html#customizing-build-setup" rel="noopener noreferrer">consult the documentation</a>.</p>
<ul>
<li>impl @FreeMasen <a href="https://github.com/axodotdev/cargo-dist/pull/1217" rel="noopener noreferrer">ci: add github build setup configuration</a></li>
</ul>
<h2>The First Rumblings Of 1.0</h2>
<p>This release introduces the first steps in a major overhaul of cargo-dist that makes it more suitable for building and distributing apps that aren't written in Rust. This is something we've supported for a long time, but now we're making a big push to make it first-class and stabilizing all the parts.</p>
<p>There is also now experimental support for natively understanding JS projects, to make it easier to use dist for standalone JS executables. <a href="https://opensource.axo.dev/cargo-dist/book/quickstart/javascript.html" rel="noopener noreferrer">Read the new JS quickstart for details!</a></p>
<p>Several other pages of the docs have seen overhauls, and many more are to come.</p>
<h2>Fixes</h2>
<ul>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1253" rel="noopener noreferrer">init: ensure terminal is restored when interrupted</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1221" rel="noopener noreferrer">fix: add missing triples to linkage check</a></li>
<li>@Colonial-Dev <a href="https://github.com/axodotdev/cargo-dist/pull/1189" rel="noopener noreferrer">fix: compatibility issues with Bash on certain distributions (Fedora, EL)</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.20.0-prerelease.1</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.1</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.20.0-prerelease.1</guid><content:encoded><![CDATA[<p>This release contains several new features and bugfixes.</p>
<h2>Support for packaging C libraries</h2>
<p>Historically, cargo-dist has been focused on building and distributing binaries. There's so many more kinds of software out there, however, and we've had requests to package more kinds of artifacts. This release introduces support for two new kinds of build artifacts: C dynamic libraries, and C static libraries. While these would always be built in the past, we wouldn't package or install them for you. Starting with this release, we've now added the option to include these in your release tarballs/ZIPs and to install them in your installers.</p>
<p>We recognize that it may cause issues if existing binary-plus-library crates began unexpectedly installing libraries with this release, so we've introduced this feature as opt-in for the time being. It may be turned on by default in a future release. To enable packaging libraries in your tarballs/ZIPs, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#package-libraries" rel="noopener noreferrer">package-libraries</a> configuration option. To enable installing libraries, use the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#install-libraries" rel="noopener noreferrer">install-libraries</a> configuration option.</p>
<p>In the current release, libraries will be installed to the same locations as binaries in the shell and PowerShell installers, while the Homebrew installer will install them to the Homebrew-standard library paths. In the future, as we introduce new forms of installation layouts, we'll provide ways for the shell and PowerShell installers to install libraries to separate locations.</p>
<p>Rust users can produce these with the <code>cdylib</code> and <code>staticlib</code> crate types. For more information, see the <a href="https://doc.rust-lang.org/reference/linkage.html" rel="noopener noreferrer">Rust documentation</a>. Generic build users can specify which libraries to include using the <code>cdylibs</code> and <code>cstaticlibs</code> configuration fields in <code>dist.toml</code>.</p>
<ul>
<li>impl @mistydemeo
<ul>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1182" rel="noopener noreferrer">Support cdylibs from Rust/generic projects</a></li>
<li><a href="https://github.com/axodotdev/cargo-dist/pull/1214" rel="noopener noreferrer">Build and install static libs</a></li>
</ul>
</li>
</ul>
<h2>Custom pre-build actions in CI</h2>
<p>This release introduces an experimental feature which makes it possible to run arbitrary extra build steps before cargo-dist's own build step during GitHub Actions runs. This can be useful for users who have mandatory pre-build setup they want to perform which can't be satisfied using the system dependencies feature. For example, a build which requires a custom installation of lua could specify that these two extra steps should be performed before the build begins:</p>
<pre style="background-color:#263238;"><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Install Lua
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">uses</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">xpol/setup-lua@v1
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">with</span><span style="color:#89ddff;">:
</span><span style="color:#eeffff;">    </span><span style="color:#f07178;">lua-version</span><span style="color:#89ddff;">: "</span><span style="color:#c3e88d;">5.3</span><span style="color:#89ddff;">"
</span><span style="color:#89ddff;">- </span><span style="color:#f07178;">name</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">Check lua installation
</span><span style="color:#eeffff;">  </span><span style="color:#f07178;">run</span><span style="color:#89ddff;">: </span><span style="color:#c3e88d;">lua -e "print('hello world!')"
</span></pre>

<p>For more information, <a href="https://opensource.axo.dev/cargo-dist/book/ci/github.html#customizing-build-setup" rel="noopener noreferrer">consult the documentation</a>.</p>
<ul>
<li>impl @FreeMasen <a href="https://github.com/axodotdev/cargo-dist/pull/1217" rel="noopener noreferrer">ci: add github build setup configuration</a></li>
</ul>
<h2>The First Rumblings Of 1.0</h2>
<p>This release introduces the first steps in a major overhaul of cargo-dist that makes it more suitable for building and distributing apps that aren't written in Rust. This is something we've supported for a long time, but now we're making a big push to make it first-class and stabilizing all the parts.</p>
<p>There is also now experimental support for natively understanding JS projects, to make it easier to use dist for standalone JS executables. <a href="https://opensource.axo.dev/cargo-dist/book/quickstart/javascript.html" rel="noopener noreferrer">Read the new JS quickstart for details!</a></p>
<p>Several other pages of the docs have seen overhauls, and many more are to come.</p>
<h2>Fixes</h2>
<ul>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1253" rel="noopener noreferrer">init: ensure terminal is restored when interrupted</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1221" rel="noopener noreferrer">fix: add missing triples to linkage check</a></li>
<li>@Colonial-Dev <a href="https://github.com/axodotdev/cargo-dist/pull/1189" rel="noopener noreferrer">fix: compatibility issues with Bash on certain distributions (Fedora, EL)</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.19.1 (2024-07-12)</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.19.1</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.19.1</guid><content:encoded><![CDATA[<p>This is a minor release that makes cargo-dist build with versions of rustc older than 1.79.0 (as of this writing, the latest release). The previous cargo-dist release accidentally relied on the rustc's <a href="https://blog.rust-lang.org/2024/06/13/Rust-1.79.0.html#extending-automatic-temporary-lifetime-extension" rel="noopener noreferrer">new temporary lifetime extension features</a>, making us suddenly require bleeding edge rustc for no good reason.</p>
]]></content:encoded></item><item><title>Version 0.19.0 (2024-07-11)</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.19.0</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.19.0</guid><content:encoded><![CDATA[<p>This release improves support for corporate networks, fixes a regression in the ssldotcom-windows-sign feature, and lands some more groundwork for future improvements.</p>
<h2>System Certificates</h2>
<p>When doing network requests, cargo-dist and axoupdater can be configured to look at both the system certificate stores and <a href="https://github.com/rustls/webpki-roots" rel="noopener noreferrer">builtin webpki-roots</a>. Usually the latter is sufficient, but the former may be necessary to when running these tools in some corporate networks.</p>
<p>As of cargo-dist 0.19.0 and axoupdater 0.6.8, all prebuilt binaries of these two tools have both sources enabled, ensuring maximum interoperability and portability.</p>
<p>When building from source (with e.g. <code>cargo install</code>), or using axoupdater as library, we currently default to only using the webpki roots. If you need system certificates to be consulted, they can be enabled in either project with <code>--features=tls_native_roots</code>.</p>
<p>In the future we <em>may</em> just enable system certificates by default. We're being a bit cautious because we've heard some concerns about portability and performance but haven't yet seen them in the wild, at least for the systems we've tested on.</p>
<ul>
<li>@gankra + @mchernicoff <a href="https://github.com/axodotdev/cargo-dist/pull/1160" rel="noopener noreferrer">feat: add experimental tls_native_roots feature</a></li>
</ul>
<h2>Fixes</h2>
<ul>
<li>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1160" rel="noopener noreferrer">fix: update axoasset to fix regression in ssldotcom-windows-sign</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1199" rel="noopener noreferrer">fix: handle Invoke-Installer errors</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1195" rel="noopener noreferrer">fix: writeback default install-path to config to prepare for changing the default</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.19.0-prerelease.1</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.19.0-prerelease.1</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.19.0-prerelease.1</guid><content:encoded><![CDATA[<p>This release improves support for corporate networks, fixes a regression in the ssldotcom-windows-sign feature, and lands some more groundwork for future improvements.</p>
<h2>System Certificates</h2>
<p>When doing network requests, cargo-dist and axoupdater can be configured to look at both the system certificate stores and <a href="https://github.com/rustls/webpki-roots" rel="noopener noreferrer">builtin webpki-roots</a>. Usually the latter is sufficient, but the former may be necessary to when running these tools in some corporate networks.</p>
<p>As of cargo-dist 0.19.0 and axoupdater 0.6.8, all prebuilt binaries of these two tools have both sources enabled, ensuring maximum interoperability and portability.</p>
<p>When building from source (with e.g. <code>cargo install</code>), or using axoupdater as library, we currently default to only using the webpki roots. If you need system certificates to be consulted, they can be enabled in either project with <code>--features=tls_native_roots</code>.</p>
<p>In the future we <em>may</em> just enable system certificates by default. We're being a bit cautious because we've heard some concerns about portability and performance but haven't yet seen them in the wild, at least for the systems we've tested on.</p>
<ul>
<li>@gankra + @mchernicoff <a href="https://github.com/axodotdev/cargo-dist/pull/1160" rel="noopener noreferrer">feat: add experimental tls_native_roots feature</a></li>
</ul>
<h2>Fixes</h2>
<ul>
<li>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1160" rel="noopener noreferrer">fix: update axoasset to fix regression in ssldotcom-windows-sign</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1199" rel="noopener noreferrer">fix: handle Invoke-Installer errors</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1195" rel="noopener noreferrer">fix: writeback default install-path to config to prepare for changing the default</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.18.1-prerelease.3</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.18.1-prerelease.3</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.18.1-prerelease.3</guid><content:encoded><![CDATA[<p>Nothing Yet!</p>
]]></content:encoded></item><item><title>Version 0.18.1-prerelease.2</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.18.1-prerelease.2</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.18.1-prerelease.2</guid><content:encoded><![CDATA[<p>Nothing Yet!</p>
]]></content:encoded></item><item><title>Version 0.18.1-prerelease.1</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.18.1-prerelease.1</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.18.1-prerelease.1</guid><content:encoded><![CDATA[<p>Nothing Yet!</p>
]]></content:encoded></item><item><title>Version 0.18.0 (2024-07-03)</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.18.0</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.18.0</guid><content:encoded><![CDATA[<h2>Features</h2>
<h3>disabling the CI build cache when unecessary</h3>
<p>For a long time now we've had <a href="https://github.com/Swatinem/rust-cache" rel="noopener noreferrer"><code>swatinem/rust-cache</code></a> as part of cargo-dist's CI build jobs. In fact, improving the configuration for that cache has been one of the most frequent new contributions!</p>
<p>With all the improvements applied, we've actually discovered that the cache largely wasn't doing anything in practice. This is because <code>swatinem/rust-cache</code> quite reasonably invalidates the cache whenever your Cargo.toml or Cargo.lock changes, which includes changing the version of your crate to publish a new version -- the thing you do right before cutting a release with cargo-dist!</p>
<p>Worse yet, the cache can hang each build machine for over 2 minutes to determine this fact, meaning it often <em>slows down</em> releases!</p>
<p>So we've introduced the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#cache-builds" rel="noopener noreferrer">cache-builds setting</a> and defaulted it to off for most users. Users that might benefit from it still will have it defaulted on. See the docs for details!</p>
<ul>
<li><a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#cache-builds" rel="noopener noreferrer">docs</a></li>
<li>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1178" rel="noopener noreferrer">feat: add cache-builds setting, and disable by default</a></li>
</ul>
<h3>allowing custom job permissions to be changed</h3>
<p>When using custom CI jobs, cargo-dist's CI needs to pass down permissions to each one. For a long time now we've passed special permissions to custom publish jobs to let them publish to <a href="https://github.com/features/packages" rel="noopener noreferrer">GitHub packages</a>, but they've been hardcoded, and all other jobs have had no special permissions.</p>
<p>Now using the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-custom-job-permissions" rel="noopener noreferrer">github-custom-job-permissions setting</a> you can give any of your custom jobs whatever permissions they need.</p>
<ul>
<li><a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-custom-job-permissions" rel="noopener noreferrer">docs</a></li>
<li>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1179" rel="noopener noreferrer">feat: add github-custom-job-permissions setting</a></li>
</ul>
<h2>Fixes</h2>
<ul>
<li>@zanieb <a href="https://github.com/axodotdev/cargo-dist/pull/1180" rel="noopener noreferrer">docs: improve example for bin-aliases option</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.18.0-prerelease.2</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.18.0-prerelease.2</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.18.0-prerelease.2</guid><content:encoded><![CDATA[<h2>Features</h2>
<h3>disabling the CI build cache when unecessary</h3>
<p>For a long time now we've had <a href="https://github.com/Swatinem/rust-cache" rel="noopener noreferrer"><code>swatinem/rust-cache</code></a> as part of cargo-dist's CI build jobs. In fact, improving the configuration for that cache has been one of the most frequent new contributions!</p>
<p>With all the improvements applied, we've actually discovered that the cache largely wasn't doing anything in practice. This is because <code>swatinem/rust-cache</code> quite reasonably invalidates the cache whenever your Cargo.toml or Cargo.lock changes, which includes changing the version of your crate to publish a new version -- the thing you do right before cutting a release with cargo-dist!</p>
<p>Worse yet, the cache can hang each build machine for over 2 minutes to determine this fact, meaning it often <em>slows down</em> releases!</p>
<p>So we've introduced the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#cache-builds" rel="noopener noreferrer">cache-builds setting</a> and defaulted it to off for most users. Users that might benefit from it still will have it defaulted on. See the docs for details!</p>
<ul>
<li><a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#cache-builds" rel="noopener noreferrer">docs</a></li>
<li>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1178" rel="noopener noreferrer">feat: add cache-builds setting, and disable by default</a></li>
</ul>
<h3>allowing custom job permissions to be changed</h3>
<p>When using custom CI jobs, cargo-dist's CI needs to pass down permissions to each one. For a long time now we've passed special permissions to custom publish jobs to let them publish to <a href="https://github.com/features/packages" rel="noopener noreferrer">GitHub packages</a>, but they've been hardcoded, and all other jobs have had no special permissions.</p>
<p>Now using the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-custom-job-permissions" rel="noopener noreferrer">github-custom-job-permissions setting</a> you can give any of your custom jobs whatever permissions they need.</p>
<ul>
<li><a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-custom-job-permissions" rel="noopener noreferrer">docs</a></li>
<li>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1179" rel="noopener noreferrer">feat: add github-custom-job-permissions setting</a></li>
</ul>
<h2>Fixes</h2>
<ul>
<li>@zanieb <a href="https://github.com/axodotdev/cargo-dist/pull/1180" rel="noopener noreferrer">docs: improve example for bin-aliases option</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.18.0-prerelease.1</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.18.0-prerelease.1</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.18.0-prerelease.1</guid><content:encoded><![CDATA[<h2>Features</h2>
<h3>disabling the CI build cache when unecessary</h3>
<p>For a long time now we've had <a href="https://github.com/Swatinem/rust-cache" rel="noopener noreferrer"><code>swatinem/rust-cache</code></a> as part of cargo-dist's CI build jobs. In fact, improving the configuration for that cache has been one of the most frequent new contributions!</p>
<p>With all the improvements applied, we've actually discovered that the cache largely wasn't doing anything in practice. This is because <code>swatinem/rust-cache</code> quite reasonably invalidates the cache whenever your Cargo.toml or Cargo.lock changes, which includes changing the version of your crate to publish a new version -- the thing you do right before cutting a release with cargo-dist!</p>
<p>Worse yet, the cache can hang each build machine for over 2 minutes to determine this fact, meaning it often <em>slows down</em> releases!</p>
<p>So we've introduced the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#cache-builds" rel="noopener noreferrer">cache-builds setting</a> and defaulted it to off for most users. Users that might benefit from it still will have it defaulted on. See the docs for details!</p>
<ul>
<li><a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#cache-builds" rel="noopener noreferrer">docs</a></li>
<li>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1178" rel="noopener noreferrer">feat: add cache-builds setting, and disable by default</a></li>
</ul>
<h3>allowing custom job permissions to be changed</h3>
<p>When using custom CI jobs, cargo-dist's CI needs to pass down permissions to each one. For a long time now we've passed special permissions to custom publish jobs to let them publish to <a href="https://github.com/features/packages" rel="noopener noreferrer">GitHub packages</a>, but they've been hardcoded, and all other jobs have had no special permissions.</p>
<p>Now using the <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-custom-job-permissions" rel="noopener noreferrer">github-custom-job-permissions setting</a> you can give any of your custom jobs whatever permissions they need.</p>
<ul>
<li><a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-custom-job-permissions" rel="noopener noreferrer">docs</a></li>
<li>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1179" rel="noopener noreferrer">feat: add github-custom-job-permissions setting</a></li>
</ul>
<h2>Fixes</h2>
<ul>
<li>@zanieb <a href="https://github.com/axodotdev/cargo-dist/pull/1180" rel="noopener noreferrer">docs: improve example for bin-aliases option</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.17.0 (2024-06-27)</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.17.0</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.17.0</guid><content:encoded><![CDATA[<p>This release is mostly several fixes to how we create GitHub Releases, as well as some internal improvements for future feature work.</p>
<h2>GitHub Release Ordering</h2>
<p>We now prefer creating your <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-release" rel="noopener noreferrer">GitHub Release in the host step</a>, ensuring published npm and Homebrew packages never refer to URLs that don't yet exist.</p>
<p>Conceptually the cargo-dist pipeline is as follow:</p>
<ol>
<li>plan the release</li>
<li>build the artifacts</li>
<li>host the artifacts</li>
<li>publish the packages (these can fetch the hosted artifacts!)</li>
<li>announce the release (this says to install the published packages!)</li>
</ol>
<p>GitHub Releases has always been a bit problematic as a hosting provider because it's both where we want to host our files, and creating it is also in some sense announcing the release. Ideally you would be able to draft the GitHub Release to host your files, publish everything that references those files, and then undraft it at the end to announce and tag the release. However the URLs of artifacts in a draft release are temporary, and go away when you undraft it, so this doesn't work.</p>
<p>When we first created cargo-dist, we didn't support publishing packages, so we put GitHub Release at the end, since it was basically the only "side-effect" of running cargo-dist, and you want those at the end. Once we added publishing of things to npm and homebrew, the dual nature of GitHub releases became way more apparent.</p>
<p>In fact, because the GitHub Release contains instructions to install from npm/homebrew, there was essentially a circular dependency between them, with no way to publish all of them in a non-racey way. At the time we opted for preserving existing behaviour of GitHub Last, resulting in a roughly 30 second period where npm/homebrew packages would be published but would error out on install because the artifacts aren't yet uploaded.</p>
<p>We were of course frustrated with this and <a href="https://blog.axo.dev/2024/01/axo-releases-urls" rel="noopener noreferrer">had a lot of words to say about URLs, resulting in us making axo Releases, which solved the problem properly</a>.</p>
<p>But pure GitHub users aren't going away, and this conflict still exists for them. Since then it's become increasingly clear that we made the wrong call here, and in fact the npm/homebrew package integrity is <em>way</em> more important than someone maybe getting an email about a GitHub Release referencing packages that don't yet exist. As such we've reversed the original decision and moved GitHub Releases to the host step.</p>
<p>When using axo Releases together with GitHub Releases, GitHub remains in the announce step where it belongs, because it's more of a mirror/announcement, and not the canonical file host.</p>
<p>If for whatever reason you need to get the old behaviour back, you can use the new <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-release" rel="noopener noreferrer"><code>github-release = "announce"</code> config</a>.</p>
<p>The only reason you might want to override this setting is if you're using <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#dispatch-releases" rel="noopener noreferrer"><code>dispatch-releases = true</code></a> and you really want your git tag to be the last operation in your release process (because creating a GitHub Release necessarily creates the git tag if it doesn't yet exist, and many organizations really don't like when you delete/change git tags). In this case setting <code>github-release = "announce"</code> will accomplish that, but the above race conditions would then apply.</p>
<ul>
<li><a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-release" rel="noopener noreferrer">docs</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1171" rel="noopener noreferrer">fix: prefer creating github releases in host step</a></li>
</ul>
<h2>GitHub Release Reliability</h2>
<p>GitHub Releases should once again be created transactionally, preventing a release from being created without its artifacts being uploaded, if uploading the artifacts fails for any reason. This fixes a regression from the previous release.</p>
<p>When using the <code>dispatch-releases = true</code> setting, we now more strictly specify the commit that should be tagged, preventing any race conditions from changing it. This race potentially always existed, but only seemed to be observable if you retried a failed release.</p>
<ul>
<li>@gankra + @mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1164" rel="noopener noreferrer">fix: make github releases more robust</a></li>
</ul>
<h2>Other Fixes</h2>
<ul>
<li>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1116" rel="noopener noreferrer">feat: experimental generic workspaces</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1135" rel="noopener noreferrer">chore: move axoproject in tree</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1158" rel="noopener noreferrer">fix: clamp workspace search to current repo</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1157" rel="noopener noreferrer">fix: pass correct path to generic builds</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1150" rel="noopener noreferrer">fix: add generic workspace tests</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1139" rel="noopener noreferrer">fix: pipe working directory to more commands</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1165" rel="noopener noreferrer">feat: cache cargo-dist binary in global tasks</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.17.0-prerelease.2</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.17.0-prerelease.2</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.17.0-prerelease.2</guid><content:encoded><![CDATA[<p>This release is mostly several fixes to how we create GitHub Releases, as well as some internal improvements for future feature work.</p>
<h2>GitHub Release Ordering</h2>
<p>We now prefer creating your <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-release" rel="noopener noreferrer">GitHub Release in the host step</a>, ensuring published npm and Homebrew packages never refer to URLs that don't yet exist.</p>
<p>Conceptually the cargo-dist pipeline is as follow:</p>
<ol>
<li>plan the release</li>
<li>build the artifacts</li>
<li>host the artifacts</li>
<li>publish the packages (these can fetch the hosted artifacts!)</li>
<li>announce the release (this says to install the published packages!)</li>
</ol>
<p>GitHub Releases has always been a bit problematic as a hosting provider because it's both where we want to host our files, and creating it is also in some sense announcing the release. Ideally you would be able to draft the GitHub Release to host your files, publish everything that references those files, and then undraft it at the end to announce and tag the release. However the URLs of artifacts in a draft release are temporary, and go away when you undraft it, so this doesn't work.</p>
<p>When we first created cargo-dist, we didn't support publishing packages, so we put GitHub Release at the end, since it was basically the only "side-effect" of running cargo-dist, and you want those at the end. Once we added publishing of things to npm and homebrew, the dual nature of GitHub releases became way more apparent.</p>
<p>In fact, because the GitHub Release contains instructions to install from npm/homebrew, there was essentially a circular dependency between them, with no way to publish all of them in a non-racey way. At the time we opted for preserving existing behaviour of GitHub Last, resulting in a roughly 30 second period where npm/homebrew packages would be published but would error out on install because the artifacts aren't yet uploaded.</p>
<p>We were of course frustrated with this and <a href="https://blog.axo.dev/2024/01/axo-releases-urls" rel="noopener noreferrer">had a lot of words to say about URLs, resulting in us making axo Releases, which solved the problem properly</a>.</p>
<p>But pure GitHub users aren't going away, and this conflict still exists for them. Since then it's become increasingly clear that we made the wrong call here, and in fact the npm/homebrew package integrity is <em>way</em> more important than someone maybe getting an email about a GitHub Release referencing packages that don't yet exist. As such we've reversed the original decision and moved GitHub Releases to the host step.</p>
<p>When using axo Releases together with GitHub Releases, GitHub remains in the announce step where it belongs, because it's more of a mirror/announcement, and not the canonical file host.</p>
<p>If for whatever reason you need to get the old behaviour back, you can use the new <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-release" rel="noopener noreferrer"><code>github-release = "announce"</code> config</a>.</p>
<p>The only reason you might want to override this setting is if you're using <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#dispatch-releases" rel="noopener noreferrer"><code>dispatch-releases = true</code></a> and you really want your git tag to be the last operation in your release process (because creating a GitHub Release necessarily creates the git tag if it doesn't yet exist, and many organizations really don't like when you delete/change git tags). In this case setting <code>github-release = "announce"</code> will accomplish that, but the above race conditions would then apply.</p>
<ul>
<li><a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-release" rel="noopener noreferrer">docs</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1171" rel="noopener noreferrer">fix: prefer creating github releases in host step</a></li>
</ul>
<h2>GitHub Release Reliability</h2>
<p>GitHub Releases should once again be created transactionally, preventing a release from being created without its artifacts being uploaded, if uploading the artifacts fails for any reason. This fixes a regression from the previous release.</p>
<p>When using the <code>dispatch-releases = true</code> setting, we now more strictly specify the commit that should be tagged, preventing any race conditions from changing it. This race potentially always existed, but only seemed to be observable if you retried a failed release.</p>
<ul>
<li>@gankra + @mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1164" rel="noopener noreferrer">fix: make github releases more robust</a></li>
</ul>
<h2>Other Fixes</h2>
<ul>
<li>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1116" rel="noopener noreferrer">feat: experimental generic workspaces</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1135" rel="noopener noreferrer">chore: move axoproject in tree</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1158" rel="noopener noreferrer">fix: clamp workspace search to current repo</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1157" rel="noopener noreferrer">fix: pass correct path to generic builds</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1150" rel="noopener noreferrer">fix: add generic workspace tests</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1139" rel="noopener noreferrer">fix: pipe working directory to more commands</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1165" rel="noopener noreferrer">feat: cache cargo-dist binary in global tasks</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.17.0-prerelease.1</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.17.0-prerelease.1</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.17.0-prerelease.1</guid><content:encoded><![CDATA[<p>This release is mostly several fixes to how we create GitHub Releases, as well as some internal improvements for future feature work.</p>
<h2>GitHub Release Ordering</h2>
<p>We now prefer creating your <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-release" rel="noopener noreferrer">GitHub Release in the host step</a>, ensuring published npm and Homebrew packages never refer to URLs that don't yet exist.</p>
<p>Conceptually the cargo-dist pipeline is as follow:</p>
<ol>
<li>plan the release</li>
<li>build the artifacts</li>
<li>host the artifacts</li>
<li>publish the packages (these can fetch the hosted artifacts!)</li>
<li>announce the release (this says to install the published packages!)</li>
</ol>
<p>GitHub Releases has always been a bit problematic as a hosting provider because it's both where we want to host our files, and creating it is also in some sense announcing the release. Ideally you would be able to draft the GitHub Release to host your files, publish everything that references those files, and then undraft it at the end to announce and tag the release. However the URLs of artifacts in a draft release are temporary, and go away when you undraft it, so this doesn't work.</p>
<p>When we first created cargo-dist, we didn't support publishing packages, so we put GitHub Release at the end, since it was basically the only "side-effect" of running cargo-dist, and you want those at the end. Once we added publishing of things to npm and homebrew, the dual nature of GitHub releases became way more apparent.</p>
<p>In fact, because the GitHub Release contains instructions to install from npm/homebrew, there was essentially a circular dependency between them, with no way to publish all of them in a non-racey way. At the time we opted for preserving existing behaviour of GitHub Last, resulting in a roughly 30 second period where npm/homebrew packages would be published but would error out on install because the artifacts aren't yet uploaded.</p>
<p>We were of course frustrated with this and <a href="https://blog.axo.dev/2024/01/axo-releases-urls" rel="noopener noreferrer">had a lot of words to say about URLs, resulting in us making axo Releases, which solved the problem properly</a>.</p>
<p>But pure GitHub users aren't going away, and this conflict still exists for them. Since then it's become increasingly clear that we made the wrong call here, and in fact the npm/homebrew package integrity is <em>way</em> more important than someone maybe getting an email about a GitHub Release referencing packages that don't yet exist. As such we've reversed the original decision and moved GitHub Releases to the host step.</p>
<p>When using axo Releases together with GitHub Releases, GitHub remains in the announce step where it belongs, because it's more of a mirror/announcement, and not the canonical file host.</p>
<p>If for whatever reason you need to get the old behaviour back, you can use the new <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-release" rel="noopener noreferrer"><code>github-release = "announce"</code> config</a>.</p>
<p>The only reason you might want to override this setting is if you're using <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#dispatch-releases" rel="noopener noreferrer"><code>dispatch-releases = true</code></a> and you really want your git tag to be the last operation in your release process (because creating a GitHub Release necessarily creates the git tag if it doesn't yet exist, and many organizations really don't like when you delete/change git tags). In this case setting <code>github-release = "announce"</code> will accomplish that, but the above race conditions would then apply.</p>
<ul>
<li><a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#github-release" rel="noopener noreferrer">docs</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1171" rel="noopener noreferrer">fix: prefer creating github releases in host step</a></li>
</ul>
<h2>GitHub Release Reliability</h2>
<p>GitHub Releases should once again be created transactionally, preventing a release from being created without its artifacts being uploaded, if uploading the artifacts fails for any reason. This fixes a regression from the previous release.</p>
<p>When using the <code>dispatch-releases = true</code> setting, we now more strictly specify the commit that should be tagged, preventing any race conditions from changing it. This race potentially always existed, but only seemed to be observable if you retried a failed release.</p>
<ul>
<li>@gankra + @mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1164" rel="noopener noreferrer">fix: make github releases more robust</a></li>
</ul>
<h2>Other Fixes</h2>
<ul>
<li>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1116" rel="noopener noreferrer">feat: experimental generic workspaces</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1135" rel="noopener noreferrer">chore: move axoproject in tree</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1158" rel="noopener noreferrer">fix: clamp workspace search to current repo</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1157" rel="noopener noreferrer">fix: pass correct path to generic builds</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1150" rel="noopener noreferrer">fix: add generic workspace tests</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1139" rel="noopener noreferrer">fix: pipe working directory to more commands</a></li>
<li>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1165" rel="noopener noreferrer">feat: cache cargo-dist binary in global tasks</a></li>
</ul>
]]></content:encoded></item><item><title>Version 0.16.0 (2024-06-14)</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.16.0</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.16.0</guid><content:encoded><![CDATA[<p>This release introduces some new <a href="https://opensource.axo.dev/cargo-dist/book/supplychain-security/index.html" rel="noopener noreferrer">supplychain security features</a>, and fixes some bugs.</p>
<h2>GitHub Artifact Attestations</h2>
<p>With the new <a href="https://opensource.axo.dev/cargo-dist/book/supplychain-security/attestations/github.html" rel="noopener noreferrer"><code>github-attestations = true</code> setting</a> you can opt into GitHub's experimental artifact attestation system. In the future this may become enabled by default.</p>
<ul>
<li>@dunxen <a href="https://github.com/axodotdev/cargo-dist/pull/1012" rel="noopener noreferrer">feat: add support for github artifact attestations</a></li>
</ul>
<h2>Reducing Third-Party Actions</h2>
<p>We're working towards replacing some third-party GitHub actions used by cargo-dist with builtin implementations, reducing the surface area for audits. We've begun with replacing <a href="https://github.com/ncipollo/release-action" rel="noopener noreferrer">ncipollo/release-action</a> with usage of the preinstalled GitHub CLI. To be clear: we have no reason to distrust the contents of action, and it's officially recommended by GitHub. It was just simple to replace with a more first-party solution.</p>
<p>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1089" rel="noopener noreferrer">feat: use the raw github cli instead of an action for releases</a></p>
<h2>Autodetect Buildjet Runners For Rust Cache</h2>
<p>We use <a href="https://github.com/Swatinem/rust-cache" rel="noopener noreferrer">swatinem/rust-cache</a> to try to speed up the release process. As it turns out, they have special support for buildjet's caching backend, which is faster and presumably more secure to use when running actions on buildjet's infra. Our users often <a href="https://opensource.axo.dev/cargo-dist/book/ci/customizing.html#custom-runners" rel="noopener noreferrer">enable buildjet for arm linux builds</a>, so hopefully those should be faster now!</p>
<p>@gankra + @arlyon <a href="https://github.com/axodotdev/cargo-dist/pull/1129" rel="noopener noreferrer">feat: autodetect buildjet runners to use their backend for rust cache</a></p>
<h2>Path Flexibility For Extra Artifacts</h2>
<p>Previously <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#extra-artifacts" rel="noopener noreferrer">the extra-artifacts setting</a> didn't support the outputs being produced anywhere but the root of the repository. Now the input can be a relative path, making the feature easier to use.</p>
<p>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1128" rel="noopener noreferrer">fix: rework extra_artifacts to properly use paths</a></p>
]]></content:encoded></item><item><title>Version 0.16.0-prerelease.6</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.16.0-prerelease.6</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.16.0-prerelease.6</guid><content:encoded><![CDATA[<p>This release introduces some new <a href="https://opensource.axo.dev/cargo-dist/book/supplychain-security/index.html" rel="noopener noreferrer">supplychain security features</a>, and fixes some bugs.</p>
<h2>GitHub Artifact Attestations</h2>
<p>With the new <a href="https://opensource.axo.dev/cargo-dist/book/supplychain-security/attestations/github.html" rel="noopener noreferrer"><code>github-attestations = true</code> setting</a> you can opt into GitHub's experimental artifact attestation system. In the future this may become enabled by default.</p>
<ul>
<li>@dunxen <a href="https://github.com/axodotdev/cargo-dist/pull/1012" rel="noopener noreferrer">feat: add support for github artifact attestations</a></li>
</ul>
<h2>Reducing Third-Party Actions</h2>
<p>We're working towards replacing some third-party GitHub actions used by cargo-dist with builtin implementations, reducing the surface area for audits. We've begun with replacing <a href="https://github.com/ncipollo/release-action" rel="noopener noreferrer">ncipollo/release-action</a> with usage of the preinstalled GitHub CLI. To be clear: we have no reason to distrust the contents of action, and it's officially recommended by GitHub. It was just simple to replace with a more first-party solution.</p>
<p>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1089" rel="noopener noreferrer">feat: use the raw github cli instead of an action for releases</a></p>
<h2>Autodetect Buildjet Runners For Rust Cache</h2>
<p>We use <a href="https://github.com/Swatinem/rust-cache" rel="noopener noreferrer">swatinem/rust-cache</a> to try to speed up the release process. As it turns out, they have special support for buildjet's caching backend, which is faster and presumably more secure to use when running actions on buildjet's infra. Our users often <a href="https://opensource.axo.dev/cargo-dist/book/ci/customizing.html#custom-runners" rel="noopener noreferrer">enable buildjet for arm linux builds</a>, so hopefully those should be faster now!</p>
<p>@gankra + @arlyon <a href="https://github.com/axodotdev/cargo-dist/pull/1129" rel="noopener noreferrer">feat: autodetect buildjet runners to use their backend for rust cache</a></p>
<h2>Path Flexibility For Extra Artifacts</h2>
<p>Previously <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#extra-artifacts" rel="noopener noreferrer">the extra-artifacts setting</a> didn't support the outputs being produced anywhere but the root of the repository. Now the input can be a relative path, making the feature easier to use.</p>
<p>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1128" rel="noopener noreferrer">fix: rework extra_artifacts to properly use paths</a></p>
]]></content:encoded></item><item><title>Version 0.16.0-prerelease.5</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.16.0-prerelease.5</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.16.0-prerelease.5</guid><content:encoded><![CDATA[<p>This release introduces some new <a href="https://opensource.axo.dev/cargo-dist/book/supplychain-security/index.html" rel="noopener noreferrer">supplychain security features</a>, and fixes some bugs.</p>
<h2>GitHub Artifact Attestations</h2>
<p>With the new <a href="https://opensource.axo.dev/cargo-dist/book/supplychain-security/attestations/github.html" rel="noopener noreferrer"><code>github-attestations = true</code> setting</a> you can opt into GitHub's experimental artifact attestation system. In the future this may become enabled by default.</p>
<ul>
<li>@dunxen <a href="https://github.com/axodotdev/cargo-dist/pull/1012" rel="noopener noreferrer">feat: add support for github artifact attestations</a></li>
</ul>
<h2>Reducing Third-Party Actions</h2>
<p>We're working towards replacing some third-party GitHub actions used by cargo-dist with builtin implementations, reducing the surface area for audits. We've begun with replacing <a href="https://github.com/ncipollo/release-action" rel="noopener noreferrer">ncipollo/release-action</a> with usage of the preinstalled GitHub CLI. To be clear: we have no reason to distrust the contents of action, and it's officially recommended by GitHub. It was just simple to replace with a more first-party solution.</p>
<p>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1089" rel="noopener noreferrer">feat: use the raw github cli instead of an action for releases</a></p>
<h2>Autodetect Buildjet Runners For Rust Cache</h2>
<p>We use <a href="https://github.com/Swatinem/rust-cache" rel="noopener noreferrer">swatinem/rust-cache</a> to try to speed up the release process. As it turns out, they have special support for buildjet's caching backend, which is faster and presumably more secure to use when running actions on buildjet's infra. Our users often <a href="https://opensource.axo.dev/cargo-dist/book/ci/customizing.html#custom-runners" rel="noopener noreferrer">enable buildjet for arm linux builds</a>, so hopefully those should be faster now!</p>
<p>@gankra + @arlyon <a href="https://github.com/axodotdev/cargo-dist/pull/1129" rel="noopener noreferrer">feat: autodetect buildjet runners to use their backend for rust cache</a></p>
<h2>Path Flexibility For Extra Artifacts</h2>
<p>Previously <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#extra-artifacts" rel="noopener noreferrer">the extra-artifacts setting</a> didn't support the outputs being produced anywhere but the root of the repository. Now the input can be a relative path, making the feature easier to use.</p>
<p>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1128" rel="noopener noreferrer">fix: rework extra_artifacts to properly use paths</a></p>
]]></content:encoded></item><item><title>Version 0.16.0-prerelease.4</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.16.0-prerelease.4</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.16.0-prerelease.4</guid><content:encoded><![CDATA[<p>This release introduces some new <a href="https://opensource.axo.dev/cargo-dist/book/supplychain-security/index.html" rel="noopener noreferrer">supplychain security features</a>, and fixes some bugs.</p>
<h2>GitHub Artifact Attestations</h2>
<p>With the new <a href="https://opensource.axo.dev/cargo-dist/book/supplychain-security/attestations/github.html" rel="noopener noreferrer"><code>github-attestations = true</code> setting</a> you can opt into GitHub's experimental artifact attestation system. In the future this may become enabled by default.</p>
<ul>
<li>@dunxen <a href="https://github.com/axodotdev/cargo-dist/pull/1012" rel="noopener noreferrer">feat: add support for github artifact attestations</a></li>
</ul>
<h2>Reducing Third-Party Actions</h2>
<p>We're working towards replacing some third-party GitHub actions used by cargo-dist with builtin implementations, reducing the surface area for audits. We've begun with replacing <a href="https://github.com/ncipollo/release-action" rel="noopener noreferrer">ncipollo/release-action</a> with usage of the preinstalled GitHub CLI. To be clear: we have no reason to distrust the contents of action, and it's officially recommended by GitHub. It was just simple to replace with a more first-party solution.</p>
<p>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1089" rel="noopener noreferrer">feat: use the raw github cli instead of an action for releases</a></p>
<h2>Autodetect Buildjet Runners For Rust Cache</h2>
<p>We use <a href="https://github.com/Swatinem/rust-cache" rel="noopener noreferrer">swatinem/rust-cache</a> to try to speed up the release process. As it turns out, they have special support for buildjet's caching backend, which is faster and presumably more secure to use when running actions on buildjet's infra. Our users often <a href="https://opensource.axo.dev/cargo-dist/book/ci/customizing.html#custom-runners" rel="noopener noreferrer">enable buildjet for arm linux builds</a>, so hopefully those should be faster now!</p>
<p>@gankra + @arlyon <a href="https://github.com/axodotdev/cargo-dist/pull/1129" rel="noopener noreferrer">feat: autodetect buildjet runners to use their backend for rust cache</a></p>
<h2>Path Flexibility For Extra Artifacts</h2>
<p>Previously <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#extra-artifacts" rel="noopener noreferrer">the extra-artifacts setting</a> didn't support the outputs being produced anywhere but the root of the repository. Now the input can be a relative path, making the feature easier to use.</p>
<p>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1128" rel="noopener noreferrer">fix: rework extra_artifacts to properly use paths</a></p>
]]></content:encoded></item><item><title>Version 0.16.0-prerelease.3</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.16.0-prerelease.3</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.16.0-prerelease.3</guid><content:encoded><![CDATA[<p>This release introduces some new <a href="https://opensource.axo.dev/cargo-dist/book/supplychain-security/index.html" rel="noopener noreferrer">supplychain security features</a>, and fixes some bugs.</p>
<h2>GitHub Artifact Attestations</h2>
<p>With the new <a href="https://opensource.axo.dev/cargo-dist/book/supplychain-security/attestations/github.html" rel="noopener noreferrer"><code>github-attestations = true</code> setting</a> you can opt into GitHub's experimental artifact attestation system. In the future this may become enabled by default.</p>
<ul>
<li>@dunxen <a href="https://github.com/axodotdev/cargo-dist/pull/1012" rel="noopener noreferrer">feat: add support for github artifact attestations</a></li>
</ul>
<h2>Reducing Third-Party Actions</h2>
<p>We're working towards replacing some third-party GitHub actions used by cargo-dist with builtin implementations, reducing the surface area for audits. We've begun with replacing <a href="https://github.com/ncipollo/release-action" rel="noopener noreferrer">ncipollo/release-action</a> with usage of the preinstalled GitHub CLI. To be clear: we have no reason to distrust the contents of action, and it's officially recommended by GitHub. It was just simple to replace with a more first-party solution.</p>
<p>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1089" rel="noopener noreferrer">feat: use the raw github cli instead of an action for releases</a></p>
<h2>Autodetect Buildjet Runners For Rust Cache</h2>
<p>We use <a href="https://github.com/Swatinem/rust-cache" rel="noopener noreferrer">swatinem/rust-cache</a> to try to speed up the release process. As it turns out, they have special support for buildjet's caching backend, which is faster and presumably more secure to use when running actions on buildjet's infra. Our users often <a href="https://opensource.axo.dev/cargo-dist/book/ci/customizing.html#custom-runners" rel="noopener noreferrer">enable buildjet for arm linux builds</a>, so hopefully those should be faster now!</p>
<p>@gankra + @arlyon <a href="https://github.com/axodotdev/cargo-dist/pull/1129" rel="noopener noreferrer">feat: autodetect buildjet runners to use their backend for rust cache</a></p>
<h2>Path Flexibility For Extra Artifacts</h2>
<p>Previously <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#extra-artifacts" rel="noopener noreferrer">the extra-artifacts setting</a> didn't support the outputs being produced anywhere but the root of the repository. Now the input can be a relative path, making the feature easier to use.</p>
<p>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1128" rel="noopener noreferrer">fix: rework extra_artifacts to properly use paths</a></p>
]]></content:encoded></item><item><title>Version 0.16.0-prerelease.2</title><link>http://127.0.0.1:7979/cargo-dist/changelog/v0.16.0-prerelease.2</link><category domain="https://github.com/axodotdev/cargo-dist">cargo-dist Changelog</category><guid>http://127.0.0.1:7979/cargo-dist/changelog/v0.16.0-prerelease.2</guid><content:encoded><![CDATA[<p>This release introduces some new <a href="https://opensource.axo.dev/cargo-dist/book/supplychain-security/index.html" rel="noopener noreferrer">supplychain security features</a>, and fixes some bugs.</p>
<h2>GitHub Artifact Attestations</h2>
<p>With the new <a href="https://opensource.axo.dev/cargo-dist/book/supplychain-security/attestations/github.html" rel="noopener noreferrer"><code>github-attestations = true</code> setting</a> you can opt into GitHub's experimental artifact attestation system. In the future this may become enabled by default.</p>
<ul>
<li>@dunxen <a href="https://github.com/axodotdev/cargo-dist/pull/1012" rel="noopener noreferrer">feat: add support for github artifact attestations</a></li>
</ul>
<h2>Reducing Third-Party Actions</h2>
<p>We're working towards replacing some third-party GitHub actions used by cargo-dist with builtin implementations, reducing the surface area for audits. We've begun with replacing <a href="https://github.com/ncipollo/release-action" rel="noopener noreferrer">ncipollo/release-action</a> with usage of the preinstalled GitHub CLI. To be clear: we have no reason to distrust the contents of action, and it's officially recommended by GitHub. It was just simple to replace with a more first-party solution.</p>
<p>@mistydemeo <a href="https://github.com/axodotdev/cargo-dist/pull/1089" rel="noopener noreferrer">feat: use the raw github cli instead of an action for releases</a></p>
<h2>Autodetect Buildjet Runners For Rust Cache</h2>
<p>We use <a href="https://github.com/Swatinem/rust-cache" rel="noopener noreferrer">swatinem/rust-cache</a> to try to speed up the release process. As it turns out, they have special support for buildjet's caching backend, which is faster and presumably more secure to use when running actions on buildjet's infra. Our users often <a href="https://opensource.axo.dev/cargo-dist/book/ci/customizing.html#custom-runners" rel="noopener noreferrer">enable buildjet for arm linux builds</a>, so hopefully those should be faster now!</p>
<p>@gankra + @arlyon <a href="https://github.com/axodotdev/cargo-dist/pull/1129" rel="noopener noreferrer">feat: autodetect buildjet runners to use their backend for rust cache</a></p>
<h2>Path Flexibility For Extra Artifacts</h2>
<p>Previously <a href="https://opensource.axo.dev/cargo-dist/book/reference/config.html#extra-artifacts" rel="noopener noreferrer">the extra-artifacts setting</a> didn't support the outputs being produced anywhere but the root of the repository. Now the input can be a relative path, making the feature easier to use.</p>
<p>@gankra <a href="https://github.com/axodotdev/cargo-dist/pull/1128" rel="noopener noreferrer">fix: rework extra_artifacts to properly use paths</a></p>
]]></content:encoded></item></channel></rss>